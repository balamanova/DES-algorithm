#include <iostream>
#include <string>
#include <math.h>
#include <cstring>
#include <sstream>
#include <bitset>
using namespace std;

 int pFor[32]={16, 7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25};
   

string bin2hex(string str){
		
    bitset<128> set(str);  
    //cout << hex << set.to_ulong() << endl;
	stringstream res;
res << hex << uppercase << set.to_ulong();
return res.str();

}

string hex2bin(string p)//hexadecimal to binary
{
    string ap="";
    int l=p.length();
    for(int i=0;i<l;i++)
    {
        string st="";
        if(p[i]>='0'&&p[i]<='9')
        {
            int te=int(p[i])-48;
            while(te>0)
            {
                st+=char(te%2+48);
                te/=2;
            }
            while(st.length()!=4)
                st+='0';
            for(int j=3;j>=0;j--)
                ap+=st[j];
        }
        else
        {
            int te=p[i]-'A'+10;
            while(te>0)
            {
                st+=char(te%2+48);
                te/=2;
            }
            for(int j=3;j>=0;j--)
                ap+=st[j];
        }
    }
    return ap;
}

string BitSelec(string str){
	int bit[48]= {32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1};
   string str2;
   for(int i=0;i<48;i++){
	   str2+=str.at(bit[i]-1);
   }
   //cout<<str2<<"\n";
   return str2;
}

string XoR(string str, string str2){
string s;

for(int i=0;i<str2.length();i++){
	  if((str.at(i)=='1' && str2.at(i)=='0') || (str.at(i)=='0' && str2.at(i)=='1')) {
		  s+="1";
	  }
	  else 
		  s+="0";
  }
return s;

}

string DecToBin(int n){
	int a[10], i; 
	string str;  
for(i=0; i<4; i++)    
{    
a[i]=n%2; 
n= n/2;  
}    
for(i=i-1 ;i>=0 ;i--)    
{  
str+=to_string(a[i]); 
}  
return str;
	}

int BinToDec(string x){
	int a=0, i=0, h;
	
	for(i=x.length()-1;i>=0;i--){
		if(x.at(i)=='0'){
		h=0;}
		else 
			h=1;
		a+=h*pow(2, x.length()-i-1);
	}

	return a;
	}

string PerFromSBox(string str){
  string s;
   for(int i=0;i<32;i++){
	   s+=str.at(pFor[i]-1);
   }
	return s;
}
string Per1(string str, int i){
	int pc1[56]=  {57,49,41,33, 25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36, 63,55,47,39,31,23,15, 7,62,54,46,38,30,22,14, 6,61, 53, 45, 37,29, 21,13,5 ,28,20,12,4};
	string s;
	for(int z=i;z<28+i;z++){
		s+=str.at(pc1[z]-1);
	}
	
return s;
}

int m=1;
int main()
{
    int z=0;
	
    int pc2[56]={14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32};
   int s[8][4][16]=
{
{
{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7}, 
{0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
{4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
{15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}
},
{
{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10}, 
{3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
{0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15}, 
{13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}
},
{
{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
{13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
{13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
{1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}
},
{
{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
{13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
{10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
{3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}
},
{
{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
{14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
{4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
{11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}
},
{
{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
{10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
{9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
{4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}
},
{
{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
{13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
{1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
{6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}
},
{
{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
{1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
{7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
{2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}
}
};
   cout<<"Please write a plaintext, equal to 16 characters ";
  string pt;
  cin>>pt;
   string mes,a;
   mes = hex2bin(pt);
 
   cout<<"Please write a key, equal to 16 characters ";
    cin>>a;
	
a=hex2bin(a);



  string l, r;
  //Permutation Platintext  and divide into two part
 
  int i=1, j=0;
  ////ENCRYPTION
  string lef[17], rig[17], merged[17];
  lef[0] = Per1(a, 0);
  rig[0] = Per1(a, 28);
  merged[0] = lef[0]+rig[0];
  
  //Subkey Right and Left C0 D0 degen

  while(j<28 && i<17){
	  if(i==1 || i==2 || i==9 ||i==16)
	  { j++;}
	else 
	{  j+=2;}
      lef[i]=lef[0].substr(j, lef[0].length());
      lef[i]+=lef[0].substr(0, j);
	//cout<<"C"<<i<<" :"<<lef[i]<<"\n";
      rig[i]=rig[0].substr(j, rig[0].length());
      rig[i]+=rig[0].substr(0,j);
	// cout<<"D"<<i<<" :"<<rig[i]<<"\n";
	  merged[i] = lef[i] + rig[i];
	 // cout<<"it "<<i<<" left "<<j<<"\n";
	   i++;
      } 

  //Permutation 2 Found Key Merging
  string k[16];

  for(i=0;i<16;i++){
	  for(int z=0;z<48;z++){
		  k[i]+= merged[i+1].at(pc2[z]-1);
	  }
	}
  
  string L2, R2,alg;
int ip[64]={58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8, 57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7};
    // to the left right with ip
  for(int i=0;i<64;i++){
	  if(i<32)
     L2+=mes.at(ip[i]-1);
     else 
	R2+=mes.at(ip[i]-1);  
  }
  while(m<17){
 alg =BitSelec(R2);

  //Xor with key
  string xored;
//cout<<"KEY" <<m<<" " <<k[m-1]<<"\n";
  
  xored = XoR(k[m-1], alg);
  //cout<<"\nXoR\n" <<xored<<"\n";
 
  //End XoR with subkey

  int sOrd=0;

  //DES S-boxes
  string last;
  i=0;
  while(i<xored.length() && sOrd<8){
	  int row, col;
  string row2, col2;

	 row2+=xored.at(i);
     row2 +=xored.at(i+5);
	  //cout<<"Row2 "<<row2<<" ";
	 row = BinToDec(row2);
	  
	 col2= xored.substr(i+1,4);
	// cout<<"Col "<<col2<<" ";
	 col =BinToDec(col2);
	// cout<<sOrd<<" "<<row<<" "<<col<<" \n";
	// cout<<s[sOrd][row][col]<<"\n";
	last+=DecToBin(s[sOrd][row][col]); 
  i+=6; sOrd++;}
 // cout<<last;
  last= PerFromSBox(last);
  //End of S-Boxes
  alg = XoR(L2, last);
  L2=R2;
  R2 = alg;
  //cout<<"L2"<<L2<<"\n";
    //cout<<"R2"<<R2<<"\n";
   m++;
  }
  int Rev[64]={ 40   ,  8  , 48  ,  16  ,  56 ,  24 ,   64  , 32,
            39   ,  7 ,  47  ,  15   , 55,   23  ,  63 ,  31,
            38   ,  6  , 46  ,  14   , 54 ,  22 ,   62  , 30,
            37    , 5   ,45,    13  ,  53  , 21,    61,   29,
            36   ,  4 ,  44 ,   12 ,   52,   20   , 60 ,  28,
            35    , 3  , 43  ,  11   , 51 ,  19  ,  59  , 27,
            34    , 2  , 42   , 10  ,  50  , 18 ,   58  , 26,
			33    , 1  , 41   ,  9 ,   49   ,17,    57  , 25};
  mes=R2+L2;
 cout<<"Mes" <<mes<<"\n";
  string alg1;
  for(i=0;i<64;i++){
	  alg1+=mes.at(Rev[i]-1);
  }
  
 string enc;

  enc=bin2hex(alg1.substr(0,32));
  enc+=bin2hex(alg1.substr(32,32));
  cout<<"Encrypted :"<< enc<<"\n";

//////DECRYPTed
	//a- key
	//mes- plaintext to bin

  l=mes.substr(0,32);
  r=mes.substr(32,32);
    m=16;
    string ltem;
	int t;
	string cip;
	while(m--)
    {
        ltem=l;
        t=1;
        string ep="",xorout="",sout="",soutt;
        //the expansion P box
        ep+=l[31];
        for(i=0;i<32;i++)
        {
            if((t+1)%6==0)
            {
                ep+=l[4*((t+1)/6)];
                t++;
            }
            if(t%6==0&&i!=0)
            {
                ep+=l[4*(t/6)-1];
                t++;
            }
            ep=ep+l[i];
            t++;
        }
        ep+=l[0];
        //Xor from p box
        for(i=0;i<48;i++)
			xorout+=char(((int(ep[i])-48)^(k[m].at(i)-'0'))+48);
		int row, col, temp;
        //sbox 48 to 32
        for(i=0;i<48;i+=6)
        {
            row=(int(xorout[i+5])-48)+(int(xorout[i])-48)*2;
            col= (int(xorout[i+1])-48)*8+(int(xorout[i+2])-48)*4+(int(xorout[i+3])-48)*2+(int(xorout[i+4])-48);
            temp=s[i/6][row][col];
            soutt="";
            while(temp>0)
            {
                soutt+=char(temp%2+48);
                temp/=2;
            }
            while(soutt.length()!=4)
                soutt+='0';
            for(j=soutt.length()-1;j>=0;j--)
                sout+=soutt[j];
        }
        //pbox to sbox
        char pc[32];
        for(i=0;i<32;i++)
            pc[i]=sout[pFor[i]-1];
        l="";
        for(i=0;i<32;i++)
            l+=char(((int(pc[i])-48)^(int(r[i])-48))+48);
        r=ltem;
		
        cip="";
        for(i=0;i<32;i+=4)
        {
            int te;
            te=(int(l[i])-48)*8+(int(l[i+1])-48)*4+(int(l[i+2])-48)*2+(int(l[i+3])-48);
            if(te<10)
                cip+=char(te+48);
            else
                cip+=char(te+55);
        }
        for(i=0;i<32;i+=4)
        {
            int te;
            te=(int(r[i])-48)*8+(int(r[i+1])-48)*4+(int(r[i+2])-48)*2+(int(r[i+3])-48);
            if(te<10)
                cip+=char(te+48);
            else
                cip+=char(te+55);
        }
       
    }
 cout<<"Decrypted: "<<cip<<endl;

  system("pause");
  }